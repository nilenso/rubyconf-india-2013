
= who are we? =

- steven
- kitallis
- c42 => nilenso
- [whore-alert] nilenso logo => coop pie chart, internal bootstrapping, oh-we're-hiring [/whore-alert]

= random =

- http://www.geekfarm.org/cgi-bin/tao.pl

- keys/maps, examples (hashes, PAN card #, SIN, json, mongodb)
  - we like one-step table lookups.
  - airindia: if I need ALL my information to check in at a kiosk, I AM THE KEY
- concurrency is the new memory management

- _why quote about taste vs. creating
  - what about taste in creation?
  - UIs (2 examples for comparison?)

= intro to tao te ching =

- translations
- victor h. mair transcript, poems out of order (we'll use the serial order from the old manuscript)
- taoist philosophy: nature, the way, the perfect man
- taoist writing: double-entendres, paradoxes, humour, poetic/musical quality

= zero: a warning on the flaw of communication =

- #1: "the tao that can be told is not the eternal tao. the name that can be named is not the eternal name."
- taoism refers to the only permanent thing (perhaps a non-thing) as "tao"
- whatever we say today is, by definition, flawed and impermanent

- #32: "there are already enough names. we need to know when to stop."
- as developers we love to talk things to death
- we may be overstepping our bounds by trying to find great meaning in what we do. forgive us.

= one: on naming =

- #32: "there are already enough names. we need to know when to stop."
- names, patterns, abstractions -- when is it too much?


- meta: GoF "pattern" of Interpreter -- wat. (vs. Flyweight or Iterator, say)
  - TODO: is there something better than this?
  - why do we have patterns at all? (vs. libraries)
- FRP is just stream processing?

- keys/maps, examples (hashes, PAN card #, SIN, json, mongodb)
  - we like one-step table lookups.
  - airindia: if I need ALL my information to check in at a kiosk, I AM THE KEY

- 2 hard problems: naming & cache invalidation

- Whitehead: "tree" => "Sam The Tree" => "Sam" at a moment in time
- Objects:
  - a "class" => the "Tree" => git commit f45eabb => an "object"
  - an "object" => a "Tree" object (instance) 
    => "Sam the tree" (sam = Tree.new) 
    => moment (memento?)

- TODO: code example: things over-named or under-namespaced (long names)
                      over-DRYing

= two: on returning =

- _why: CLOSURE.pdf, pg 23

- #2: "the ten thousand things rise and fall without cease. 
       creating, yet not possessing. 
       working, yet not taking credit.
       work is done, then forgotten.
       therefore it lasts forever."

- #9: "retire when the work is done."

- #12: "racing and hunting madden the mind." ?

- #13: "accept being unimportant."

- #16: "the way of nature is unchanging.
        knowing constancy is insight.
        not knowing constancy leads to disaster."

- #23: "high winds to not last all morning.
        heavy rain does not last all day.
        why is this? heaven and earth!
        if heaven and earth cannot make things last forever,
        how is it possible for us?"

- TODO: code example: simple => complex => refactored / *eliminated* (arel?)

- TODO: stop-motion animations of "static" things (starfield, rotting fruit, something slower?)

- TODO: ruby object lifecycle animation
  1. lifecycle (create/destroy hooks) logging
  2. log/stdout => animation (processing?)
  3. references logging
  4. messages logging
  5. cute example app (camping?)

= three: on usefulness =

- #11
- we read/write code but don't know about:
  - runtime
  - CPU caches
  - words in memory
  - pointers, etc.

= four: on humility =

- do we want this at all?

- #7: "the wise stay behind, and are thus ahead.
       they are detached, thus at one with all.
       through selfless action, they attain fulfillment."
- #10: "working yet not taking credit." / "can you be without cleverness?"
- #24
- #30: "achieve results, but never boast."
- "a journey of a thousand miles" ? "give as much care to the end as the beginning."

- zen of python

- TODO: code example of (not) designing for the future - grandiose plans that failed
        code example of cleverness = bad

= five: on effortlessness =

- #8: "in action, watch the timing."
- #28: "a great tailor makes few cuts."
- #30: "force is followed by loss of strength.
        this is not the way of the tao.
        that which goes against the tao
        comes to an early end."

- repl/rails console
  - wheel wright (cannot teach my son) / butcher never blunts his knife / "a good tailor makes few cuts."
  - idea => experiment => (TDD?) => program  : assists effortlessness
  - 1) how to achieve effortlessness? practice.
  - 2) "a journey of a thousand miles" small steps. #63 + #64
  - alan kay tennis video

- working late nights, weekends, "pushing yourself" vs. loving every minute of it
  - the story of the developer who actually went crazy:
    http://startingdotneprogramming.blogspot.in/2013/04/i-knew-programmer-that-went-completely.html

= X: on thrift (effortlessness? greed? desire?) =

- #9: "oversharpen the blade, and the edge will soon blunt.
       amass a store of gold and jade, and no one can protect it."

- "thrift" as minimalism

- TODO: premature optimization + "beautiful" but slow (android dev docs: don't create too many objs)

= X: on love =

- #8: "no fight, no blame."
- #27
- #49: "I am also good to those who are not good."

- consulting tie-in? patience?

= X: on leadership =

- #17: "when actions are performed without unnecessary talk, People say, `We did it!`"

- leading a team, not claiming
- TODO: code example?

= X: on the simple path =

- "fruit over flowers."
- "the way is easy to follow but people are enamoured with mountain roads."

- perl-isms
- over-engineering

= X: constraints & oppression =

- "weapons are instruments of fear."
- laws create thieves
- "without awe there will be disaster."

- working under constraints
  - human constraints (type systems, restrictive APIs)
  - natural constraints (the limitations of the hardware are God)
